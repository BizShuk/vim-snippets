extends c

##
## Preprocessor
# #include <...>
snippet incc
	#include <${1:iostream}>
snippet binc
	#include <boost/${1:shared_ptr}.hpp>


##
## namespace
#
snippet nm
	using namespace ${1:std};

##
## STL Collections
# array
snippet array
	array<${1:T}, ${2:N}> ${3};
# vector
snippet vector
	vector<${1:T}> ${2};
# deque
snippet deque
	deque<${1:T}> ${2};
# forward_list
snippet flist
	forward_list<${1:T}> ${2};
# list
snippet list
	list<${1:T}> ${2};
# set
snippet set
	set<${1:T}> ${2};
# map
snippet map
	map<${1:Key}, ${2:T}> ${3};
# multiset
snippet mset
	multiset<${1:T}> ${2};
# multimap
snippet mmap
	multimap<${1:Key}, ${2:T}> ${3};
# unordered_set
snippet uset
	unordered_set<${1:T}> ${2};
# unordered_map
snippet umap
	unordered_map<${1:Key}, ${2:T}> ${3};
# unordered_multiset
snippet umset
	unordered_multiset<${1:T}> ${2};
# unordered_multimap
snippet ummap
	unordered_multimap<${1:Key}, ${2:T}> ${3};
# stack
snippet stack
	stack<${1:T}> ${2};
# queue
snippet queue
	queue<${1:T}> ${2};
# priority_queue
snippet pqueue
	priority_queue<${1:T}> ${2};
##
## Access Modifiers
# private
snippet pri
	private
# protected
snippet pro
	protected
# public
snippet pub
	public
# friend
snippet fr
	friend
# mutable
snippet mu
	mutable
##
## Class
# class
snippet cl
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
	public:
		$1(${2});
		~$1();

	private:
		${0:/* data */}
	};
# member function implementation
snippet mfun
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
# namespace
snippet ns
	namespace ${1:`vim_snippets#Filename('', 'my')`} {
		${0}
	} /* namespace $1 */
##
## Input/Output
# cout
snippet cout
	cout << ${1} << endl;
# cin
snippet cin
	cin >> ${1};
##
## Casts
# static
snippet sca
	static_cast<${1:unsigned}>(${2:expr})${3}
# dynamic
snippet dca
	dynamic_cast<${1:unsigned}>(${2:expr})${3}
# reinterpret
snippet rca
	reinterpret_cast<${1:unsigned}>(${2:expr})${3}
# const
snippet cca
	const_cast<${1:unsigned}>(${2:expr})${3}
## Iteration
# for i
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}

# foreach
snippet fore
	for (${1:auto} ${2:i} : ${3:container}) {
		${4}
	}
# iterator
snippet iter
	for (${1:vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}

# auto iterator
snippet itera
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:cout << *$1 << endl;}
	}
##
## Lambdas
# lamda (one line)
snippet ld
	[${1}](${2}){${3}};
# lambda (multi-line)
snippet lld
	[${1}](${2}){
		${3}
	};
